import os
import re
import random
import hashlib
import hmac
import logging
import json
from string import letters
import webapp2
import jinja2
from datetime import datetime, timedelta, tzinfo

from google.appengine.api import memcache
from google.appengine.ext import db, blobstore
from google.appengine.ext.webapp.blobstore_handlers import BlobstoreUploadHandler, BlobstoreDownloadHandler

template_dir = os.path.join(os.path.dirname(__file__), 'templates')
jinja_env = jinja2.Environment(loader = jinja2.FileSystemLoader(template_dir),
								autoescape = True)
								
secret = 'smile'
								
def render_str(template, **params):
	t = jinja_env.get_template(template)
	return t.render(params)
	
def make_secure_val(val):
	return '%s|%s' % (val, hmac.new(secret, val).hexdigest())
	
def check_secure_val(secure_val):
	val = secure_val.split('|')[0]
	if secure_val == make_secure_val(val):
		return val
		
class BlogHandler(webapp2.RequestHandler):
	def write(self, *a, **kw):
		self.response.out.write(*a, **kw)
		
	def render_str(self, template, **params):
		params['user'] = self.user
		t = jinja_env.get_template(template)
		return t.render(params)
		
	def render(self, template, **kw):
		self.write(self.render_str(template, **kw))

	def render_json(self, d):
		json_txt = json.dumps(d)
		self.response.headers['Content-Type'] = 'application/json; charset=UTF-8'
		self.write(json_txt)
		
	def set_secure_cookie(self, name, val):
		cookie_val = make_secure_val(val)
		self.response.headers.add_header(
				'Set-Cookie',
				'%s=%s; Path=/' % (name, cookie_val))
		
	def read_secure_cookie(self, name):
		cookie_val = self.request.cookies.get(name)
		return cookie_val and check_secure_val(cookie_val)
		
	def login(self, user):
		self.set_secure_cookie('user_id', str(user.key().id()))
		
	def logout(self):
		self.response.headers.add_header('Set-Cookie', 'user_id=; Path=/')
		
	def initialize(self, *a, **kw):
		webapp2.RequestHandler.initialize(self, *a, **kw)
		uid = self.read_secure_cookie('user_id')
		self.user = uid and User.by_id(int(uid))
		
		if self.request.url.endswith('.json'):
			self.format = 'json'
		else:
			self.format = 'html'

def make_salt(length = 5):
	return ''.join(random.choice(letters) for x in xrange(length))
	
def make_pw_hash(name, pw, salt = None):
	if not salt:
		salt = make_salt()
	h = hashlib.sha256(name + pw + salt).hexdigest()
	return '%s,%s' % (salt, h)
	
def valid_pw(name, password, h):
	salt = h.split(',')[0]
	return h == make_pw_hash(name, password, salt)
	
def users_key(group = 'default'):
	return db.Key.from_path('users', group)
		
class User(db.Model):
	name = db.StringProperty(required = True)
	pw_hash = db.StringProperty(required = True)
	email = db.StringProperty()
	
	@classmethod
	def by_id(cls, uid):
		return User.get_by_id(uid, parent = users_key())
		
	@classmethod
	def by_name(cls, name):
		u = User.all().filter('name =', name).get()
		return u
		
	@classmethod
	def register(cls, name, pw, email = None):
		pw_hash = make_pw_hash(name, pw)
		return User(parent = users_key(),
					name = name,
					pw_hash = pw_hash,
					email = email)
					
	@classmethod
	def login(cls, name, pw):
		u = cls.by_name(name)
		if u and valid_pw(name, pw, u.pw_hash):
			return u
	
def blog_key(name = 'default'):
	return db.Key.from_path('blogs', name)
	
class Post(db.Model):
	artist = db.StringProperty(required = True)
	subject = db.StringProperty(required = True)
	content = db.TextProperty(required = True)
	art_object = blobstore.BlobReferenceProperty()
	created = db.DateTimeProperty(auto_now_add = True)
	last_modified = db.DateTimeProperty(auto_now = True)
	
	def render(self):
		self._render_text = self.content.replace('\n', '<br>')
		return render_str("post.html", p = self)
		
	def as_dict(self):
		time_fmt = '%c'
		d = {'artist':self.artist,
			'subject': self.subject,
			'content': self.content,
			'art_object':self.art_object,
			'created': self.created.strftime(time_fmt),
			'last_modified': self.last_modified.strftime(time_fmt)}
		return d

def age_set(key, posts):
	save_time = datetime.now()
	memcache.set(key, (posts,save_time))
	
def age_get(key):
	r = memcache.get(key)
	if r:
		posts, save_time = r
		age = (datetime.now() - save_time).total_seconds()
	else:
		posts, age = None, 0
	return posts, age
				
def top_posts(update = False):
	key = 'top'
	posts, age = age_get(key)
	
	if posts is None or update:
		# logging.error("DB query")
		# posts = greetings = ("select * from Post order by created desc limit 10")
		posts = greetings = Post.all().order('-created')
		posts = list(posts)
		
		age_set(key, posts)		
				
	return posts, age
			
def age_str(age):
	s = 'queried %s seconds ago'
	age = int(age)
	if age == 1:
		s = s.replace('seconds', 'second')
	return s % age

def DaSearching(quest):
		posts, age = top_posts()
		thesearch = list()
		for p in posts:
			if p.artist == quest or p.subject == quest or p.content == quest:
				thesearch.append(p)
		return thesearch

def gone(posts):
	for p in posts:
		# print p.key().id(), "no this is the id"
		# logging.error("DB id query")
		if p.artist == "dk":
			db.delete(p)

class DownloadArtObject(BlogHandler, BlobstoreDownloadHandler):
	def get(self, post_key):
		post = Post.get(post_key)
		self.send_blob(post.art_object)

class UploadArtObject(BlogHandler, BlobstoreUploadHandler):
	def post(self, post_key):
		post = Post.get(post_key)
		post.art_object = self.get_uploads(post.art_object)
		post.put()
		
class MainPage(BlogHandler):
	def get(self):
		posts, age = top_posts()
		age = age_str(age)
		if self.format == 'html':
			self.render('front.html', posts = posts, age=age)
		else:
			return self.render_json([p.as_dict() for p in posts])
		
class BlogFront(BlogHandler):
	def get(self, anything=""):
		posts = top_posts(update=True)
		
		if self.format == 'html':
			self.render('front.html', posts = posts)
		else:
			return self.render_json([p.as_dict() for p in posts])
			
class PostPage(BlogHandler, BlobstoreDownloadHandler):
	def get(self, post_id):
		key = db.Key.from_path('Post', int(post_id), parent=blog_key())
		post = db.get(key)
		posts, age = top_posts(update=True)
		age = age_str(age)
		
		# gone(posts)

		logging.error(post.art_object)
		logging.error("art object i hope")
		if self.format == 'html':
			self.render("permalink.html",  post = post, age=age)
		else:
			self.render_json(posts.as_dict())
			
	def post(self):
		searching = self.request.get('searching')
		logging.error(searching)
		print searching, "sssssss"
		if searching:
			answer = Searching(searching)
			self.render("searchresults.html", answer = answer)

class Searching(BlogHandler):
	
	def post(self):
		logging.error("getttting")
		
		action = self.request.get('action')
		logging.error(action)

		posts, age = top_posts()
		thesearch = list()
		
		for p in posts:
			if p.artist == action or p.subject == action or p.content == action:
				thesearch.append(p)
				self.render("SearchResults.html", thesearch = thesearch)
			# else:
				# self.render("SearchResults.html", thesearch = thesearch)
			
class NewPost(BlogHandler, BlobstoreUploadHandler):

	def get(self):
		posts, age = top_posts()
		if self.user:
			self.render("newpost.html", posts = posts, upload_url = blobstore.create_upload_url("/newpost"))
		else:
			self.redirect("/login")
						
	def post(self):
		if not self.user:
			self.redirect('/')
			
		artist = self.request.get('artist')			
		subject = self.request.get('subject')
		content = self.request.get('content')
		art_object = (self.get_uploads('art_object')[0])
		
		if subject and content:
			p = Post(parent = blog_key(), artist = artist, subject = subject, content = content, art_object=art_object)
			p.put()
			posts, age = top_posts(update=True)
			self.redirect('/blog/%s' % str(p.key().id()))
		else:
			error = "artist, subject and content, please!"
			self.render("newpost.html", artist= artist, subject=subject, content=content, error=error)
			
USER_RE = re.compile(r"^[a-zA-Z0-9_-]{3,20}$")
def valid_username(username):
	return username and USER_RE.match(username)
	
PASS_RE = re.compile(r"^.{3,20}$")
def valid_password(password):
	return password and PASS_RE.match(password)
	
EMAIL_RE  = re.compile(r'^[\S]+@[\S]+\.[\S]+$')
def valid_email(email):
	return not email or EMAIL.RE.match(email)
	
class Signup(BlogHandler):
	def get(self):
		self.render("signup-form.html")
		
	def post(self):
		have_error = False
		self.username = self.request.get('username')
		self.password = self.request.get('password')
		self.verify = self.request.get('verify')
		self.email = self.request.get('email')
		
		params = dict(username = self.username,
						email = self.email)
					
		if not valid_username(self.username):
			params['error_username'] = "That's not a valid username."
			have_error = True
		if not valid_password(self.password):
			params['error_password'] = "That wasn't a valid password."
			have_error = True
		elif self.password != self.verify:
			params['error_verify'] = "Your passwords didn't match."
			have_error = True
		if not valid_email(self.email):
			params['error_email'] = "That's not a valid email."
			have_error = True
		if have_error:
			self.render('signup-form.html', **params)
		else:
			self.done()
			
	def done(self, *a, **kw):
		self.render("login-form.html", **params)
				
class Register(Signup):
	def done(self):
		u = User.by_name(self.username)
		if u:
			msg = "That user already exists."
			self.render('signup-form.html', error_username = msg)
		else:
			u = User.register(self.username, self.password, self.email)
			u.put()
			self.login(u)
			self.redirect('welcome')
			
class Login(BlogHandler):
	def get(self):
		self.render('login-form.html')
		
	def post(self):
		username = self.request.get('username')
		password = self.request.get('password')
				
		u = User.login(username, password)	
		if u:
			self.login(u)
			self.redirect('welcome')
		else:
			msg = 'Invalid login'
			self.render('login-form.html', error = msg)
			
class Logout(BlogHandler):
	def get(self):
		
		self.logout()
		self.redirect('/')
					
class Welcome(BlogHandler):
	def get(self):
		if self.user:
			self.render('welcome.html', username = self.user.name)
		else:
			self.redirect('/signup')
			
	def post(self):
		searching = self.request.get('searching')
		
		if searching:
			thesearch = DaSearching(searching)
			self.render("searchresults.html", thesearch = thesearch)
		else:
			self.redirect('/')
			
class Flush(BlogHandler):
	def get(self):
		key = 'top'
		memcache.set(key, (None,datetime.now()))		
		self.redirect('/newpost')

	
app = webapp2.WSGIApplication([('/?(?:\.json)?', MainPage),
								('/blog/?(?:\.json)?', BlogFront),
								('/blog/([0-9]+)(?:\.json)?', PostPage),
								('/newpost', NewPost),
								('/search', Searching),
								('/signup', Register),
								('/login', Login),
								('/logout', Logout),
								('/welcome', Welcome),
								('/flush', Flush),
								('/download-art-objects/(?P<post_key>[-0-9a-zA-Z]+)', DownloadArtObject),
								#('/upload-art-objects', UploadArtObject),
								],
								debug=True)
								
